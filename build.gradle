import org.gradle.api.internal.artifacts.DefaultExcludeRule

plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '4.0.3'
    id "com.bmuschko.nexus" version "2.3.1"
//    id "me.champeau.gradle.jmh" version "0.4.8"
    id 'maven-publish'
    id 'antlr'
    id "org.sonarqube" version "2.7"
    id "org.jetbrains.kotlin.jvm" version "1.3.71"
}



java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

group = 'org.neo4j.procedure'
version = '4.0.0.11'
archivesBaseName = 'apoc'
description = """neo4j-apoc-procedures"""

jar {
    manifest {
        attributes 'Implementation-Version': version
    }
}

ext {
    // NB: due to version.json generation by parsing this file, the next line must not have any if/then/else logic
    neo4jVersion = "4.0.3"
    // instead we apply the override logic here
    neo4jVersionEffective = project.hasProperty("neo4jVersionOverride") ? project.getProperty("neo4jVersionOverride") : neo4jVersion
    testContainersVersion = '1.12.2'
}

repositories {

    /*maven {  // this contains the neo4j 4.0.0-beta jars
        url "https://neo4j.bintray.com/community/"
    }*/
    jcenter()
    //mavenCentral()
    maven {
        url "https://repo.gradle.org/gradle/libs-releases"
    }
    //mavenLocal()
}

configurations {
    apt
}

shadowJar {
    archiveClassifier.set('all')
}

compileJava {
    options.annotationProcessorPath = configurations.apt
    options.compilerArgs += [
            "-AIgnoreContextWarnings"]

//    options.compilerArgs += [
//            "-AIgnoreContextWarnings",
//            "-AGeneratedDocumentationPath=" + projectDir + "/build/generated-documentation",
//            "-ADocumentation.FieldDelimiter=¦",
//            "-ADocumentation.ExportedHeaders=type¦qualified name¦description",
//            "-ADocumentation.QuotedFields=false",
//            "-ADocumentation.DelimitedFirstField=true",
//            "-ADocumentation.ExportGrouping=SINGLE,PACKAGE"]
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

generateGrammarSource {
    arguments += ["-package", "apoc.custom"]
}

dependencies {
    compileOnly "org.jetbrains.kotlin:kotlin-stdlib"
    testCompile "org.jetbrains.kotlin:kotlin-stdlib"
//    apt 'net.biville.florent:neo4j-sproc-compiler:1.2'  // temporarily disabled until byte[] is supported by sproc compiler
    apt group: 'org.neo4j', name: 'neo4j', version: neo4jVersionEffective	
    compile group: 'commons-codec', name: 'commons-codec', version: '1.14'
    compileOnly group: 'com.sun.mail', name: 'javax.mail', version: '1.6.0'
    testCompile group: 'com.sun.mail', name: 'javax.mail', version: '1.6.0'
    compile group: 'com.jayway.jsonpath', name: 'json-path', version: '2.4.0'
    compile group: 'org.hdrhistogram', name: 'HdrHistogram', version: '2.1.9'
    compile group: 'org.neo4j.driver', name: 'neo4j-java-driver', version: '4.0.1'
    compile group: 'com.novell.ldap', name: 'jldap', version: '2009-10-07'

    antlr "org.antlr:antlr4:4.7.2", {
        exclude group: 'org.glassfish'
        exclude group: 'com.ibm.icu'
        exclude group: 'org.abego.treelayout'
    }
    // compileOnly "org.antlr:antlr4-runtime:4.7.2"
    // testCompile "org.antlr:antlr4-runtime:4.7.2"

    compileOnly "org.apache.poi:poi:3.17"
    testCompile "org.apache.poi:poi:3.17"
    compileOnly "org.apache.poi:poi-ooxml:3.17"
    testCompile "org.apache.poi:poi-ooxml:3.17"

    compile 'org.jsoup:jsoup:1.11.3'

    compile group: 'org.roaringbitmap', name: 'RoaringBitmap', version: '0.7.17'
    compile group: 'org.apache.commons', name: 'commons-configuration2', version: '2.5'
    testCompile group: 'com.github.stefanbirkner', name: 'system-rules', version: '1.19.0'

    testCompile 'net.sourceforge.jexcelapi:jxl:2.6.12'

    compileOnly group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.11.270'
    testCompile group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.11.270'

    testCompile group: 'org.reflections', name: 'reflections', version: '0.9.11', { exclude group: 'com.google.guava', module: 'guava' }
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
    testCompile group: 'org.neo4j.test', name: 'neo4j-harness', version: neo4jVersionEffective
    testCompile group: 'org.eclipse.jetty', name: 'jetty-server', version: '9.2.22.v20170606'
    testCompile group: 'org.apache.derby', name: 'derby', version: '10.12.1.1'

    testCompile group: 'org.neo4j', name: 'neo4j-common', version: neo4jVersionEffective, classifier: "tests"
    testCompile group: 'org.neo4j.community', name: 'it-test-support', version: neo4jVersionEffective // , classifier: "tests"
    testCompile group: 'org.neo4j', name: 'log-test-utils', version: neo4jVersionEffective // , classifier: "tests"


    testCompile group: 'org.neo4j', name: 'neo4j-kernel', version: neo4jVersionEffective, classifier: "tests"
    testCompile group: 'org.neo4j', name: 'neo4j-io', version: neo4jVersionEffective, classifier: "tests"

    testCompile group: 'org.postgresql', name: 'postgresql', version: '42.1.4'
    testCompile group: 'io.minio', name: 'minio', version: '3.0.11', {
        exclude group: 'com.google.http-client', module: 'google-http-client'
    }

    def withoutServers = {
        exclude group: 'org.eclipse.jetty'
        exclude group: 'org.eclipse.jetty.aggregate'
        exclude group: 'org.apache.hive', module: 'hive-service'
    }

    compileOnly group: 'org.apache.hadoop', name: 'hadoop-hdfs', version: '2.7.5', withoutServers
    testCompile group: 'org.apache.hadoop', name: 'hadoop-hdfs', version: '2.7.5', withoutServers
    compileOnly group: 'org.apache.hadoop', name: 'hadoop-common', version: '2.7.5', withoutServers
    testCompile group: 'org.apache.hadoop', name: 'hadoop-common', version: '2.7.5', withoutServers
    testCompile group: 'org.apache.hadoop', name: 'hadoop-minicluster', version: '2.7.5', withoutServers

    compileOnly 'org.mongodb:mongodb-driver:3.2.2'
    testCompile 'org.mongodb:mongodb-driver:3.2.2'

    compileOnly group: 'com.couchbase.client', name: 'java-client', version: '2.7.2'
    testCompile group: 'com.couchbase.client', name: 'java-client', version: '2.7.2'

    compileOnly group: 'org.neo4j', name: 'neo4j', version: neo4jVersionEffective
    compileOnly group: 'org.codehaus.jackson', name: 'jackson-mapper-asl', version: '1.9.7'

    compileOnly group: 'com.fasterxml.jackson.module', name: 'jackson-module-kotlin', version: '2.10.3'
    compileOnly 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.3.71'

    testCompile group: 'com.fasterxml.jackson.module', name: 'jackson-module-kotlin', version: '2.10.3'
    testCompile 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.3.71'


    compileOnly group: 'com.amazonaws', name: 'aws-java-sdk-comprehend', version: '1.11.683'
    testImplementation group: 'com.amazonaws', name: 'aws-java-sdk-comprehend', version: '1.11.683'

    testCompile group: 'org.codehaus.jackson', name: 'jackson-mapper-asl', version: '1.9.7'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.10.3'
    compile group: 'com.opencsv', name: 'opencsv', version: '4.2' 
    compileOnly group: 'org.ow2.asm', name: 'asm', version: '5.0.2'
    compile group: 'com.github.javafaker', name: 'javafaker', version: '0.10'

    // schemacrawler
    compile group: 'us.fatehi', name: 'schemacrawler', version: '15.04.01'
    testCompile group: 'us.fatehi', name: 'schemacrawler-mysql', version: '15.04.01'

    testCompile group: 'org.apache.hive', name: 'hive-jdbc', version: '1.2.2', withoutServers

    compile group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'
    //compileOnly group: 'org.apache.commons', name: 'commons-text', version: '1.7'
//    jmh group: 'org.neo4j', name: 'neo4j-lucene-index', version: neo4jVersionEffective
//    jmh group: 'org.neo4j', name: 'neo4j-kernel', version: neo4jVersionEffective, classifier: "tests"

    testCompile group: 'org.gradle', name: 'gradle-tooling-api', version: '6.0.1'

    testCompile group: 'org.xmlunit', name: 'xmlunit-core', version: '2.2.1'
    testCompile group: 'com.github.adejanovski', name: 'cassandra-jdbc-wrapper', version: '3.1.0'

    // Test Containers
    testCompile group: 'org.testcontainers', name: 'testcontainers', version: testContainersVersion
    testCompile group: 'org.testcontainers', name: 'neo4j', version: testContainersVersion
    testCompile group: 'org.testcontainers', name: 'elasticsearch', version: testContainersVersion
    testCompile group: 'org.testcontainers', name: 'couchbase', version: testContainersVersion
    testCompile group: 'org.testcontainers', name: 'mysql', version: testContainersVersion
    testCompile group: 'org.testcontainers', name: 'postgresql', version: testContainersVersion
    testCompile group: 'org.testcontainers', name: 'cassandra', version: testContainersVersion

    compile group: 'com.rabbitmq', name: 'amqp-client', version: '5.3.0'
    compile group: 'com.amazonaws', name: 'aws-java-sdk-sqs', version: '1.11.397'
    compile group: 'org.apache.kafka', name: 'kafka-clients', version: '2.0.0'
    testCompile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-csv', version: '2.9.7'
    testCompile group: 'org.skyscreamer', name: 'jsonassert', version: '1.5.0'
    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.13.2'

    compileOnly group: 'com.google.cloud', name: 'google-cloud-storage', version: '1.92.0'
    testCompile group: 'com.google.cloud', name: 'google-cloud-storage', version: '1.92.0', {
        exclude group: 'com.google.guava', module: 'guava'
    }

    // there is a compatibility problem between the Guava Library used by HDFS, Google Cloud Storage and Reflections; the only version that fits for all is the following
    testCompile group: 'com.google.guava', name: 'guava', version: '20.0'

    configurations.all {
        exclude group: 'org.slf4j', module: 'slf4j-nop'
    }
}

test {
    //exclude '**/CypherProceduresClusterTest.class'//, '**/AtomicTest.class'

    // neo4jDockerImage system property is used in TestContainerUtil
    systemProperties 'user.language' : 'en' , 'user.country ' : 'US', 'neo4jDockerImage' : "neo4j:${neo4jVersion}-enterprise"

/*
    testLogging {
        // taken from https://stackoverflow.com/a/36130467/158701
        events TestLogEvent.FAILED,
//                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT,
                TestLogEvent.STANDARD_ERROR
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
*/

    maxHeapSize = "8G"
    forkEvery = 50
    maxParallelForks = 1 //Runtime.runtime.availableProcessors().intdiv(2) + 1

    if (System.env.TRAVIS !=null) {
        minHeapSize = "128m"
        maxHeapSize = "512m"
    }
}

javadoc {
    failOnError = false
    options.addStringOption('Xdoclint:none', '-quiet')
}

modifyPom {
    project {
        name 'neo4j-apoc-procedures'
        packaging 'jar'
        description 'A collection of useful Neo4j Procedures'
        url 'http://github.com/neo4j-contrib/neo4j-apoc-procedures'

        organization {
            name "Neo Technology, Inc."
            url "http://neotechnology.com"
        }

        scm {
            url 'https://github.com/neo4j-contrib/neo4j-apoc-procedures'
        }

        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                comments """Note that this license is for the project itself,
and not for its dependencies."""
                distribution "repo"
            }
        }

        developers {
            developer {
                id 'michaelhunger'
                name 'Michael Hunger'
                email 'michael.hunger@neo4j.com'
            }
        }
    }
}

// tweaks for travis
if (System.env.TRAVIS == 'true') {
  allprojects {
    tasks.withType(GroovyCompile) {
      groovyOptions.fork = false
    }
    tasks.withType(Test) {
      // containers (currently) have 2 dedicated cores and 4GB of memory
      maxParallelForks = 2
      minHeapSize = '128m'
    }
  }
}

task copyRuntimeLibs(type: Copy) {
    into "lib"
    from configurations.testRuntime 
}

/*
jmh {
//    include = ['some regular expression'] // include pattern (regular expression) for benchmarks to be executed
//    exclude = ['some regular expression'] // exclude pattern (regular expression) for benchmarks to be executed
    iterations = 5 // Number of measurement iterations to do.
    benchmarkMode = ['ss']
//    benchmarkMode = ['thrpt','ss'] // Benchmark mode. Available modes are: [Throughput/thrpt, AverageTime/avgt, SampleTime/sample, SingleShotTime/ss, All/all]
//    batchSize = 1 // Batch size: number of benchmark method calls per operation. (some benchmark modes can ignore this setting)
    fork = 1 // How many times to forks a single benchmark. Use 0 to disable forking altogether
//    failOnError = false // Should JMH fail immediately if any benchmark had experienced the unrecoverable error?
//    forceGC = false // Should JMH force GC between iterations?
//    jvm = 'myjvm' // Custom JVM to use when forking.
//    jvmArgs = ['Custom JVM args to use when forking.']
//    jvmArgsAppend = ['Custom JVM args to use when forking (append these)']
//    jvmArgsPrepend =[ 'Custom JVM args to use when forking (prepend these)']
//    humanOutputFile = project.file("${project.buildDir}/reports/jmh/human.txt") // human-readable output file
//    resultsFile = project.file("${project.buildDir}/reports/jmh/results.txt") // results file
//    operationsPerInvocation = 10 // Operations per invocation.
//    benchmarkParameters =  [:] // Benchmark parameters.
//    profilers = [] // Use profilers to collect additional data. Supported profilers: [cl, comp, gc, stack, perf, perfnorm, perfasm, xperf, xperfasm, hs_cl, hs_comp, hs_gc, hs_rt, hs_thr]
//    timeOnIteration = '1s' // Time to spend at each measurement iteration.
//    resultFormat = 'CSV' // Result format type (one of CSV, JSON, NONE, SCSV, TEXT)
//    synchronizeIterations = false // Synchronize iterations?
//    threads = 4 // Number of worker threads to run with.
//    threadGroups = [2,3,4] //Override thread group distribution for asymmetric benchmarks.
//    timeout = '1s' // Timeout for benchmark iteration.
//    timeUnit = 'ms' // Output time unit. Available time units are: [m, s, ms, us, ns].
//    verbosity = 'NORMAL' // Verbosity mode. Available modes are: [SILENT, NORMAL, EXTRA]
//    warmup = '1s' // Time to spend at each warmup iteration.
//    warmupBatchSize = 2 // Warmup batch size: number of benchmark method calls per operation.
    warmupForks = 1 // How many warmup forks to make for a single benchmark. 0 to disable warmup forks.
    warmupIterations = 1 // Number of warmup iterations to do.
//    warmupMode = 'INDI' // Warmup mode for warming up selected benchmarks. Warmup modes are: [INDI, BULK, BULK_INDI].
//    warmupBenchmarks = ['.*Warmup'] // Warmup benchmarks to include in the run in addition to already selected. JMH will not measure these benchmarks, but only use them for the warmup.
    zip64 = true // Use ZIP64 format for bigger archives
//    jmhVersion = '1.15' // Specifies JMH version
//    includeTests = true // Allows to include test sources into generate JMH jar, i.e. use it when benchmarks depend on the test classes.
//    duplicateClassesStrategy = 'fail' // Strategy to apply when encountring duplicate classes during creation of the fat jar (i.e. while executing jmhJar task)
}


jmhJar {
    mergeServiceFiles()
}
*/

task mySourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

task myJavadocJar(type: Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}


publishing {
    repositories {
        maven {
            name = 'pipeline'
            url = "file://${rootProject.buildDir}/repo"
        }
    }
    publications {
        shadow(MavenPublication) { publication ->
            project.shadow.component(publication)
            artifact(mySourcesJar)
            artifact(myJavadocJar)
            artifact(jar)

            pom.withXml {
                def root = asNode()
                root.appendNode("name", "neo4j-apoc-procedure")
                root.appendNode("description", "A collection of useful Neo4j Procedures")
                root.appendNode("url", "http://github.com/neo4j-contrib/neo4j-apoc-procedures")

                def scmNode = root.appendNode("scm")
                scmNode.appendNode("url", "http://github.com/neo4j-contrib/neo4j-apoc-procedures")

                def licensesNode = root.appendNode("licenses")
                def licenseNode = licensesNode.appendNode("license")
                licenseNode.appendNode("name", 'The Apache Software License, Version 2.0')
                licenseNode.appendNode("url", 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                licenseNode.appendNode("comments", 'Note that this license is for the project itself, and not for its dependencies.')
                licenseNode.appendNode("distribution", 'repo')

                def developersNode = root.appendNode("developers")
                def developerNode = developersNode.appendNode("developer")
                developerNode.appendNode("id", 'michaelhunger')
                developerNode.appendNode("name", 'Michael Hunger')
                developerNode.appendNode("email", 'michael.hunger@neo4j.com')

                def dependenciesNode = root.get("dependencies")[0]

                configurations.default.allDependencies.forEach {
                    def dependency = dependenciesNode.appendNode('dependency')
                    dependency.appendNode('groupId', it.group)
                    dependency.appendNode('artifactId', it.name)
                    dependency.appendNode('version', it.version)
                    dependency.appendNode('scope', "compile")

                    def myExcludeRules = it.excludeRules
                    if (myExcludeRules.size() == 0) {
                        myExcludeRules = new HashSet<>()
                    }

                    myExcludeRules.add(new DefaultExcludeRule("org.slf4j", "slf4j-nop"))

                    // for exclusions
                    if (myExcludeRules.size() > 0) {
                        def exclusions = dependency.appendNode('exclusions')
                        myExcludeRules.each { ExcludeRule ex ->
                            def exclusion = exclusions.appendNode('exclusion')
                            exclusion.appendNode('artifactId', ex.module ? ex.module : "*")
                            exclusion.appendNode('groupId', ex.group)
                        }
                    }

                }

            }

        }
    }
}
